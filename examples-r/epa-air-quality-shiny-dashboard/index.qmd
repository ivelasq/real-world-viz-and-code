---
title: "EPA Air Quality Shiny Dashboard"
categories: ["Public Sector", "General"]
description: "Using Shiny to create an EPA Air Quality Dashboard"
format: html
image: ../../code.png
filters:
  - shinylive
---

This code creates an interactive Shiny app for visualizing EPA air quality data, which is ideal for use in marketing materials that focus on:

- Environmental health and sustainability initiatives.
- Showcasing the power of interactive data to engage audiences with real-time insights.
- Illustrating how data science tools can enhance storytelling, with an easy-to-use interface that anyone can explore.
    
```r
library(shiny)
library(bslib)
library(ggplot2)
library(dplyr)
library(bsicons)

ui <- page_sidebar(
  title = "EPA Air Quality Dashboard",
  sidebar = sidebar(
    selectInput(
      "plot_type",
      "Select Plot Type",
      choices = c(
        "Temperature vs Ozone" = "temp",
        "Wind vs Ozone" = "wind",
        "Time Series" = "time"
      )
    ),
    conditionalPanel(
      condition = "input.plot_type != 'time'",
      checkboxInput("show_smooth", "Show Trend Line", TRUE)
    ),
    sliderInput(
      "month_range",
      "Select Months",
      min = 5,
      max = 9,
      value = c(5, 9),
      step = 1
    )
  ),
  
  layout_columns(
    fill = FALSE,
    value_box(
      "Average Ozone",
      textOutput("avg_ozone"),
      "ppb",
      showcase = bs_icon("cloud")
    ),
    value_box(
      "Average Temperature",
      textOutput("avg_temp"),
      "째F",
      showcase = bs_icon("thermometer-half")
    ),
    value_box(
      "Average Wind Speed",
      textOutput("avg_wind"),
      "mph",
      showcase = bs_icon("wind")
    )
  ),
  
  card(card_header("Air Quality Analysis"), plotOutput("main_plot"))
)

server <- function(input, output) {
  filtered_data <- reactive({
    airquality |>
      filter(Month >= input$month_range[1], Month <= input$month_range[2])
  })
  
  output$avg_ozone <- renderText({
    round(mean(filtered_data()$Ozone, na.rm = TRUE), 1)
  })
  
  output$avg_temp <- renderText({
    round(mean(filtered_data()$Temp, na.rm = TRUE), 1)
  })
  
  output$avg_wind <- renderText({
    round(mean(filtered_data()$Wind, na.rm = TRUE), 1)
  })
  
  output$main_plot <- renderPlot({
    data <- filtered_data()
    
    if (input$plot_type == "temp") {
      p <- ggplot(data, aes(x = Temp, y = Ozone)) +
        geom_point(alpha = 0.6, color = "steelblue")
      
      if (input$show_smooth) {
        p <- p + geom_smooth(method = "loess", se = TRUE)
      }
      
      p + labs(x = "Temperature (째F)", y = "Ozone (ppb)")
      
    } else if (input$plot_type == "wind") {
      p <- ggplot(data, aes(x = Wind, y = Ozone)) +
        geom_point(alpha = 0.6, color = "darkgreen")
      
      if (input$show_smooth) {
        p <- p + geom_smooth(method = "loess", se = TRUE)
      }
      
      p + labs(x = "Wind Speed (mph)", y = "Ozone (ppb)")
      
    } else {
      data$Date <- as.Date(paste("1973", data$Month, data$Day, sep = "-"))
      
      ggplot(data, aes(x = Date, y = Ozone)) +
        geom_line(color = "darkred") +
        geom_point(alpha = 0.6) +
        labs(x = "Date", y = "Ozone (ppb)")
    }
  })
}

shinyApp(ui, server)
```

:::{.column-body-outset}

```{shinylive-r}
#| standalone: true
#| viewerHeight: 800
#| viewerWidth: 1000
library(shiny)
library(bslib)
library(ggplot2)
library(dplyr)
library(bsicons)

ui <- page_sidebar(
  title = "EPA Air Quality Dashboard",
  sidebar = sidebar(
    selectInput(
      "plot_type",
      "Select Plot Type",
      choices = c(
        "Temperature vs Ozone" = "temp",
        "Wind vs Ozone" = "wind",
        "Time Series" = "time"
      )
    ),
    conditionalPanel(
      condition = "input.plot_type != 'time'",
      checkboxInput("show_smooth", "Show Trend Line", TRUE)
    ),
    sliderInput(
      "month_range",
      "Select Months",
      min = 5,
      max = 9,
      value = c(5, 9),
      step = 1
    )
  ),
  
  layout_columns(
    fill = FALSE,
    value_box(
      "Average Ozone",
      textOutput("avg_ozone"),
      "ppb",
      showcase = bs_icon("cloud")
    ),
    value_box(
      "Average Temperature",
      textOutput("avg_temp"),
      "째F",
      showcase = bs_icon("thermometer-half")
    ),
    value_box(
      "Average Wind Speed",
      textOutput("avg_wind"),
      "mph",
      showcase = bs_icon("wind")
    )
  ),
  
  card(card_header("Air Quality Analysis"), plotOutput("main_plot"))
)

server <- function(input, output) {
  filtered_data <- reactive({
    airquality |>
      filter(Month >= input$month_range[1], 
             Month <= input$month_range[2])
  })
  
  output$avg_ozone <- renderText({
    round(mean(filtered_data()$Ozone, na.rm = TRUE), 1)
  })
  
  output$avg_temp <- renderText({
    round(mean(filtered_data()$Temp, na.rm = TRUE), 1)
  })
  
  output$avg_wind <- renderText({
    round(mean(filtered_data()$Wind, na.rm = TRUE), 1)
  })
  
  output$main_plot <- renderPlot({
    data <- filtered_data()
    
    if (input$plot_type == "temp") {
      p <- ggplot(data, aes(x = Temp, y = Ozone)) +
        geom_point(alpha = 0.6, color = "steelblue")
      
      if (input$show_smooth) {
        p <- p + geom_smooth(method = "loess", se = TRUE)
      }
      
      p + labs(x = "Temperature (째F)", y = "Ozone (ppb)")
      
    } else if (input$plot_type == "wind") {
      p <- ggplot(data, aes(x = Wind, y = Ozone)) +
        geom_point(alpha = 0.6, color = "darkgreen")
      
      if (input$show_smooth) {
        p <- p + geom_smooth(method = "loess", se = TRUE)
      }
      
      p + labs(x = "Wind Speed (mph)", y = "Ozone (ppb)")
      
    } else {
      data$Date <- as.Date(paste("1973", data$Month, data$Day, sep = "-"))
      
      ggplot(data, aes(x = Date, y = Ozone)) +
        geom_line(color = "darkred") +
        geom_point(alpha = 0.6) +
        labs(x = "Date", y = "Ozone (ppb)")
    }
  })
}

shinyApp(ui, server)
```

:::